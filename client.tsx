/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/signals/v1/private/signals/": {
    /** @description Signals list endpoint */
    get: {
      /** @description Signals list endpoint */
      parameters?: {
          /**
           * @description Order the result of this endpoint (ASC or DESC) 
           * @example created_at
           */
          /** @description Filter Signals on a given id */
          /** @description Filter Signals located on a (part) of an address (case insensitive) */
          /** @description Filter signals according to the currently assigned location area_code, accepts a single area_code */
          /** @description Filter signals according to the currently assigned location area_type_code, accepts a single area_type_code */
          /**
           * @deprecated 
           * @description Deprecated, will be removed in the near future.
           * Filter signals according to the currently assigned location buurt_code
           */
          /** @description Filter returns only signals with matching category id(s). This will overrule the use of maincategory_slug and/or category_slug. */
          /** @description If the category_id filter is used this will overwrite the use of the maincategory_slug/category_slug filter. Filter returns only signals with matching sub category slug. */
          /** @description Filter signals according to the presence of contact details, accepts (a combination of) the following values `none` for no contact details, `phone` for the presence of a reporter's phone number, and `email` for the presence of a reporter's email address. */
          /** @description Filter returns only signals created after specified datetime. Note the date time string should be in ISO 8601 format and URL encoded. */
          /** @description Filter returns only signals created before specified datetime. Note the date time string should be in ISO 8601 format and URL encoded. */
          /** @description Filter (parent) signals according to the currently assigned directing department(s), accepts (a combination of) the codes of the declared departments. The value "null" will select all (parent) signals without a directing department assignment. This means that the "is_responsible" department associated with the category is considered the "directing department". */
          /** @description Filter Signals/meldingen according to wether feedback was received for them. This filter accepts one of the following values: `satisfied` (reporter was satisfied with the resolution), `not_satisfied` (reporter was not satisfied with the resolution), or `not_received` (no feedback was sent by the reporter). Only the newest feedback is taken into account. */
          /** @description Filters all parent signals that have changes or no changes in children. Accepts true, false or both. When both true and false are given only parent Signals are returned. */
          /** @description Filter Signals according to whether they are a Signal ("signal"), A parent Signal ("parent_signal") and/or a child Signal ("child_signal"). An additional option can be used to select all Signals that are NOT a parent Signal, this option is "exclude_parent_signal". This filter accepts (a combination of) the options "signal", "parent_signal", "exclude_parent_signal" or "child_signal". Parent/Child Signals can contain both "split Signals" and/or "Hoofd- en deelmeldingen". */
          /** @description Filter returns only signals with a incident_date at the exact specified date */
          /** @description Filter returns only signals with a incident_date after the specified date */
          /** @description Filter returns only signals with a incident_date before the specified date */
          /** @description If the category_id filter is used this will overwrite the use of the maincategory_slug/category_slug filter. Filter returns only signals with matching main category slug. */
          /** @description This filter option is temporary, and will likely be replaced by either proper tagging or extended search using the Elastic Search implementation of SIA. Filter Signals/meldingen according to the presence of a certain keyword in one or more of notes associated with a Signal/melding. Accepts one keyword, will check wether it is present and return the Signals/meldingen where it is present. */
          /** @description Filter signals according to their priority, accepts (a combination of) the following values: `low`, `high` and/or `normal`. */
          /** @description Filter Signals/meldingen according to their source, accepted values are derived from the database. Source `online` are Signals/meldingen that were created in the public website. */
          /** @description Filter signals according to the currently assigned location stadsdeel */
          /** @description Filter returns only signals with specified status. */
          /** @description Filter signals according to the currently assigned type, accepts (a combination of) the values `SIG` a "Signal/Melding", `REQ` a "Request/Aanvraag", `QUE` a "QuestionVraag", `COM` a "Complaint/Klacht" and `MAI` a "Maintenance/Groot onderhoud" */
          /** @description Filter returns only signals updated after specified datetime. Note the date time string should be in ISO 8601 format and URL encoded. */
          /** @description Filter returns only signals updated before specified datetime. Note the date time string should be in ISO 8601 format and URL encoded. */
          /** @description !!! Currently not used by Amsterdam !!! Filter signals based on the email address of the assigned user. */
          /** @description Filter signals based on the email address of its reporter. */
          /** @description !!! Currently not used by Amsterdam !!! Filter signals based on the department code set by the routing mechanism. */
          /** @description Filter signals that are being worked on to check that they are within allotted time "on_time", late in general "late", or late by a factor of three "late_factor_3". This filter accepts only one choice. It is also possible to look for Signals that have no deadline associated with them using "null" as a value. Signals in states "AFGEHANDELD", "GEANNULEERD", or "GESPLITST" will not match. */
        query?: {
          ordering?: "id" | "-id" | "created_at" | "-created_at" | "updated_at" | "-updated_at" | "stadsdeel" | "-stadsdeel" | "area_name" | "-area_name" | "sub_category" | "-sub_category" | "main_category" | "-main_category" | "status" | "-status" | "priority" | "-priority" | "address" | "-address" | "assigned_user_email" | "-assigned_user_email";
          id?: number;
          address_text?: string;
          area_code?: string;
          area_type_code?: string;
          buurt_code?: string;
          category_id?: number;
          category_slug?: string;
          contact_details?: "none" | "phone" | "email";
          created_after?: string;
          created_before?: string;
          directing_department?: string;
          feedback?: "satisfied" | "not_satisfied" | "not_received";
          has_changed_children?: boolean;
          kind?: "signal" | "parent_signal" | "exclude_parent_signal" | "child_signal";
          incident_date?: string;
          incident_date_after?: string;
          incident_date_before?: string;
          maincategory_slug?: string;
          note_keyword?: string;
          priority?: "low" | "normal" | "high";
          source?: string;
          stadsdeel?: string;
          status?: components["schemas"]["StatusStateChoices"];
          type?: "SIG" | "REQ" | "QUE" | "COM" | "MAI";
          updated_after?: string;
          updated_before?: string;
          assigned_user_email?: string;
          reporter_email?: string;
          routing_department_code?: string;
          punctuality?: "null" | "on_time" | "late" | "late_factor_3";
        };
      };
      responses: {
        /** @description List of signals */
        200: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalListGet"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
      };
    };
    /** @description Creates a new signal */
    post: {
      /** @description Creates a new signal */
      /** @description Serialized signal data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["V1PrivateSignalPost"] | components["schemas"]["V1PrivateSignalPostBulk"];
        };
      };
      responses: {
        /** @description New signal created */
        201: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalDetailGet"] | components["schemas"]["V1PrivateSignalDetailGetBulk"];
          };
        };
        /** @description Bad request */
        400: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
      };
    };
  };
  "/signals/v1/private/signals/geography": {
    /** @description Signals geography list endpoint */
    get: {
      /** @description Signals geography list endpoint */
      parameters?: {
          /** @description Filter returns only signals created before specified datetime. Note the date time string should be in ISO 8601 format and URL encoded. */
          /** @description Filter returns only signals created after specified datetime. Note the date time string should be in ISO 8601 format and URL encoded. */
          /** @description Filter returns only signals updated before specified datetime. Note the date time string should be in ISO 8601 format and URL encoded. */
          /** @description Filter returns only signals updated after specified datetime. Note the date time string should be in ISO 8601 format and URL encoded. */
          /** @description Filter returns only signals with specified status. */
          /** @description Filter returns only signals with matching main category slug. */
          /** @description Filter returns only signals with matching sub category slug. */
          /** @description Filter signals according to the presence of contact details, accepts (a combination of) the following values `none` for no contact details, `phone` for the presence of a reporter's phone number, and `email` for the presence of a reporter's email address. */
          /** @description Filter signals according to their priority, accepts (a combination of) the following values: `low`, `high` and/or `normal`. */
          /** @description Filter Signals/meldingen according to wether feedback was received for them. This filter accepts one of the following values: `satisfied` (reporter was satisfied with the resolution), `not_satisfied` (reporter was not satisfied with the resolution), or `not_received` (no feedback was sent by the reporter). Only the newest feedback is taken into account. */
          /** @description Filter Signals/meldingen according to their source, accepted values are derived from the database. Source `online` are Signals/meldingen that were created in the public website. */
          /** @description Filter signals according to the currently assigned type, accepts (a combination of) the values `SIG` a "Signal/Melding", `REQ` a "Request/Aanvraag", `QUE` a "QuestionVraag", `COM` a "Complaint/Klacht" and `MAI` a "Maintenance/Groot onderhoud" */
          /** @description This filter option is temporary, and will likely be replaced by either proper tagging or extended search using the Elastic Search implementation of SIA. Filter Signals/meldingen according to the presence of a certain keyword in one or more of notes associated with a Signal/melding. Accepts one keyword, will check wether it is present and return the Signals/meldingen where it is present. */
        query?: {
          created_before?: string;
          created_after?: string;
          updated_before?: string;
          updated_after?: string;
          status?: components["schemas"]["StatusStateChoices"];
          maincategory_slug?: string;
          category_slug?: string;
          contact_details?: "none" | "phone" | "email";
          priority?: "low" | "normal" | "high";
          feedback?: "satisfied" | "not_satisfied" | "not_received";
          source?: string;
          type?: "SIG" | "REQ" | "QUE" | "COM" | "MAI";
          note_keyword?: string;
        };
      };
      responses: {
        /** @description List of signals */
        200: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalListGetGeography"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
      };
    };
  };
  "/signals/v1/private/signals/{id}": {
    /** @description Retrieve signal by ID. */
    get: {
      /** @description Retrieve signal by ID. */
      responses: {
        /** @description The requested signal */
        200: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalDetailGet"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
        /** @description Signal not found. */
        404: never;
      };
    };
    /** @description Partial update to signal. */
    patch: {
      /** @description Partial update to signal. */
      /** @description JSON data to update signal. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["V1PrivateSignalPatch"];
        };
      };
      responses: {
        /** @description The updated signal */
        200: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalDetailGet"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
        /** @description Signal not found. */
        404: never;
      };
    };
    parameters: {
        /** @description ID of signal that is requested */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/signals/{id}/children/": {
    /** @description Retrieve child signals by parent signal ID. */
    get: {
      /** @description Retrieve child signals by parent signal ID. */
      responses: {
        /** @description Child signals associated with the specified parent. */
        200: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalchildrenGet"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
        /** @description Parent signal not found or requesting children of a parent signal that has no child signals. */
        404: never;
      };
    };
    parameters: {
        /** @description ID of signal whose child signals are requested */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/signals/{id}/history": {
    /** @description History of signal instance with specified ID. */
    get: {
      /** @description History of signal instance with specified ID. */
      responses: {
        /** @description List of history entries for given signal instance. */
        200: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Signal not found. */
        404: never;
      };
    };
    parameters: {
        /** @description ID of signal whose history needs to be retrieved. */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/signals/{id}/pdf": {
    /** @description Download a PDF summarizing this signals. */
    get: {
      /** @description Download a PDF summarizing this signals. */
      responses: {
        /** @description PDF downloaded successfully. */
        200: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to request signal PDF. */
        403: never;
        /** @description Signal not found. */
        404: never;
      };
    };
    parameters: {
        /** @description ID of signal whose PDF is to be downloaded. */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/signals/{id}/attachments/": {
    /** @description A list of attachments that belong to the Signal */
    get: {
      /** @description A list of attachments that belong to the Signal */
      responses: {
        /** @description A list of attachments */
        200: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalAttachmentsList"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to request signal attachments. */
        403: never;
        /** @description Signal not found. */
        404: never;
      };
    };
    /** @description Create an attachment for a Signal */
    post: {
      /** @description Create an attachment for a Signal */
      requestBody: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
          };
        };
      };
      responses: {
        /** @description Created an attachment */
        201: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalAttachmentDetail"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to request signal attachments. */
        403: never;
        /** @description Signal not found. */
        404: never;
      };
    };
    parameters: {
        /** @description ID of signal whose attachments are requested. */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/signals/{id}/attachments/{attachment_id}": {
    /** @description Details for an attachment to a Signal. */
    get: {
      /** @description Details for an attachment to a Signal. */
      responses: {
        /** @description Details for an attachment to a Signal. */
        200: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalAttachmentDetail"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to request signal attachments. */
        403: never;
        /** @description Signal or attachment not found. */
        404: never;
      };
    };
    /** @description Delete attachment */
    delete: {
      /** @description Delete attachment */
      responses: {
        /** @description Successfully deleted the attachment. */
        204: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to delete this attachment. */
        403: never;
        /** @description Signal or attachment not found. */
        404: never;
      };
    };
    parameters: {
        /** @description ID of signal whose attachments are requested. */
        /** @description ID the requested attachment */
      path: {
        id: number;
        attachment_id: number;
      };
    };
  };
  "/signals/v1/private/signals/{id}/context/": {
    /** @description Returns an overview of context related information about a Signal */
    get: {
      /** @description Returns an overview of context related information about a Signal */
      responses: {
        /** @description Context overview */
        200: {
          content: {
            "application/json": components["schemas"]["privateContextResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to request signal context. */
        403: never;
        /** @description The endpoint is not available OR no context is available for the given signal */
        404: never;
      };
    };
    parameters: {
        /** @description ID of the signal */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/signals/{id}/context/reporter/": {
    /** @description A detailed overview of context related to the reporter (based on the email address of a reporter) */
    get: {
      /** @description A detailed overview of context related to the reporter (based on the email address of a reporter) */
      responses: {
        /** @description Context overview */
        200: {
          content: {
            "application/json": components["schemas"]["privateContextReporterResponseList"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to request signal reporter context. */
        403: never;
        /** @description The endpoint is not available OR no context is available for the given signal */
        404: never;
      };
    };
    parameters: {
        /** @description ID of the signal */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/signals/{id}/context/near/geography/": {
    /** @description A context overview of Signals near the selected Signal */
    get: {
      /** @description A context overview of Signals near the selected Signal */
      responses: {
        /** @description Context overview */
        200: {
          content: {
            "application/json": components["schemas"]["privateContextNearGeographyResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to request signal geography context. */
        403: never;
        /** @description The endpoint is not available OR no context is available for the given signal */
        404: never;
      };
    };
    parameters: {
        /** @description ID of the signal */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/signals/{id}/email/preview/": {
    /** @description A email preview for the given status */
    post: {
      /** @description A email preview for the given status */
      requestBody?: {
        content: {
          "application/json": {
            /**
             * @description The status a email preview is requested for 
             * @example ingepland
             */
            status?: Record<string, never>;
            /** @description The status text that must appear in the email preview */
            text?: string;
          };
        };
      };
      responses: {
        /** @description Email preview (subject and html body) */
        200: {
          content: {
            "application/json": {
              /**
               * @description The subject of the email 
               * @example Uw melding SIA-123456789
               */
              subject?: string;
              /**
               * @description The rendered body (HTML) of the email 
               * @example <!DOCTYPE html><html lang="nl"><head><meta charset="UTF-8"><title>Uw melding SIA-123456789</title></head><body><p>Geachte melder,</p><p>Lorem ipsum...</p><p>Met vriendelijke groet,</p><p>Gemeente Amsterdam</p></body></html>
               */
              html?: string;
            };
          };
        };
        /** @description Bad request */
        400: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to request signal geography context. */
        403: never;
        /** @description No email preview is found for the given status transition on the selected Signal */
        404: never;
      };
    };
    parameters: {
        /** @description ID of the signal */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/public/signals": {
    /** @description Create a new Signal/melding. */
    post: {
      /** @description Create a new Signal/melding. */
      /** @description Serialized signal data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["V1PublicSignalPost"];
        };
      };
      responses: {
        /** @description New signal created */
        201: {
          content: {
            "application/json": components["schemas"]["V1PublicSignalDetailGet"];
          };
        };
        /** @description Bad request, see response body for the reason. */
        400: never;
      };
    };
  };
  "/signals/v1/public/signals/{signal_id}": {
    /** @description Public data about a Signal/melding. */
    get: {
      /** @description Public data about a Signal/melding. */
      parameters: {
          /** @description Public identifier for a Signal/melding */
        path: {
          signal_id: string;
        };
      };
      responses: {
        /** @description Public data about a Signal/melding. */
        200: {
          content: {
            "application/json": components["schemas"]["V1PublicSignalDetailGet"];
          };
        };
        /** @description Signal not found */
        404: never;
      };
    };
  };
  "/signals/v1/public/signals/{signal_id}/attachments/": {
    /** @description Create an attachment for a Signal */
    post: {
      /** @description Create an attachment for a Signal */
      requestBody: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
          };
        };
      };
      responses: {
        /** @description Created an attachment */
        201: {
          content: {
            "application/json": components["schemas"]["V1PrivateSignalAttachmentDetail"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden, user not authorized to request signal attachments. */
        403: never;
        /** @description Signal not found. */
        404: never;
      };
    };
    parameters: {
        /** @description Public identifier for a Signal/melding */
      path: {
        signal_id: string;
      };
    };
  };
  "/signals/v1/public/signals/geography": {
    /** @description Public signals geography endpoint, returns GEOjson. For this endpoint either bbox or lon/lat parameters are required.If both bbox and lon/lat are filled in only the bbox files wil be use. */
    get: {
      /** @description Public signals geography endpoint, returns GEOjson. For this endpoint either bbox or lon/lat parameters are required.If both bbox and lon/lat are filled in only the bbox files wil be use. */
      parameters?: {
          /** @description A bounding box to filter. Format is min_lon, min_lat, max_lon, max_lat */
          /** @description A longitude field to filter. */
          /** @description A latitude field to filter. */
          /** @description Filter returns only signals with matching main category slug. */
          /** @description Filter returns only signals with matching sub category slug. */
          /** @description Group the results by (at this moment the only option is 'category') */
        query?: {
          bbox?: string;
          lon?: string;
          lat?: string;
          maincategory_slug?: string;
          category_slug?: string;
          group_by?: string;
        };
      };
      responses: {
        /** @description List of signals */
        200: {
          content: {
            "application/json": components["schemas"]["V1PublicSignalGeographyGEOJson"];
          };
        };
        /** @description Required query parameters not provided */
        400: {
          content: {
            "application/json": {
              "{name_of_query_param}"?: (string)[];
            };
          };
        };
      };
    };
  };
  "/signals/v1/public/terms/categories": {
    /** @description Categories known to SIA. **May be changed** */
    get: {
      /** @description Categories known to SIA. **May be changed** */
      responses: {
        /** @description List of all main categories with embedded sub categories. */
        200: {
          content: {
            "application/json": components["schemas"]["publicCategoryListResponse"];
          };
        };
      };
    };
  };
  "/signals/v1/public/feedback/forms/{feedback_token}/": {
    /** @description Get the feedback details */
    get: {
      /** @description Get the feedback details */
      parameters: {
          /** @description Feedback token for fetching the form */
        path: {
          feedback_token: string;
        };
      };
      responses: {
        /** @description details parameters is present if the form is already filled in. */
        200: {
          content: {
            "application/json": {
              /** @example filled out */
              details?: string;
            };
          };
        };
      };
    };
    /** @description Update the feedback form */
    patch: {
      /** @description Update the feedback form */
      parameters: {
          /** @description Feedback token for fetching the form */
        path: {
          feedback_token: string;
        };
      };
      /** @description JSON data to update signal */
      requestBody: {
        content: {
          "application/json": components["schemas"]["publicFeedbackForm"];
        };
      };
      responses: {
        /** @description Update the feedback model */
        200: {
          content: {
            "aplication/json": {
              /** Format: uuid */
              signal_id?: string;
            };
          };
        };
      };
    };
  };
  "/signals/v1/public/terms/categories/{main_slug}": {
    /** @description Information about a specific main category and its sub categories. **May be changed** */
    get: {
      /** @description Information about a specific main category and its sub categories. **May be changed** */
      parameters: {
          /** @description Slug that identifies the main category. */
        path: {
          main_slug: string;
        };
      };
      responses: {
        /** @description Detailed information. */
        200: {
          content: {
            "application/json": components["schemas"]["publicCategoryParentResponse"];
          };
        };
      };
    };
  };
  "/signals/v1/public/terms/categories/{main_slug}/sub_categories/{sub_slug}": {
    /** @description Information about a specific sub category.  **May be changed** */
    get: {
      /** @description Information about a specific sub category.  **May be changed** */
      parameters: {
          /** @description Slug that identifies the main category. */
          /** @description Slug that identifies the sub category. */
        path: {
          main_slug: string;
          sub_slug: string;
        };
      };
      responses: {
        /** @description Detailed information. */
        200: {
          content: {
            "application/json": components["schemas"]["publicCategoryChildResponse"];
          };
        };
      };
    };
  };
  "/signals/user/auth/me": {
    /** @description Information about the currently authenticated user. */
    get: {
      /** @description Information about the currently authenticated user. */
      responses: {
        /** @description User information including permissions. */
        200: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
      };
    };
  };
  "/signals/v1/private/signals/category/removed": {
    /** @description Signals that dropped from a certain category are listed here. **URL may be changed** */
    get: {
      /** @description Signals that dropped from a certain category are listed here. **URL may be changed** */
      parameters?: {
          /** @description Timestamp after which dropped signals are to found. */
          /** @description Timestamp before which dropped signals are to found. */
          /** @description Slug for the category. */
        query?: {
          after?: string;
          before?: string;
          category_slug?: string;
        };
      };
      responses: {
        /** @description List of droppen Signal instances. */
        200: never;
      };
    };
  };
  "/signals/v1/private/signals/promoted/parent": {
    /** @description Signals that became a Parent are listed here. **URL may be changed** */
    get: {
      /** @description Signals that became a Parent are listed here. **URL may be changed** */
      parameters?: {
          /** @description Timestamp after which promoted signals are to be found. */
        query?: {
          after?: string;
        };
      };
      responses: {
        /** @description List of Signal ID's. */
        200: never;
      };
    };
  };
  "/signals/v1/private/categories/": {
    /** @description List of all categories available in the system */
    get: {
      /** @description List of all categories available in the system */
      responses: {
        /** @description List of all categories available in the system */
        200: {
          content: {
            "application/json": components["schemas"]["privateCategoryListResponse"];
          };
        };
      };
    };
    /** @description Creation of categories is not allowed */
    post: {
      /** @description Creation of categories is not allowed */
      responses: {
        /** @description Method not allowed */
        405: never;
      };
    };
  };
  "/signals/v1/private/categories/{id}": {
    /** @description Retrieves the category matching the given id */
    get: {
      /** @description Retrieves the category matching the given id */
      responses: {
        /** @description Details of the category matching the given id */
        200: {
          content: {
            "application/json": components["schemas"]["privateCategoryResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token */
        401: never;
        /** @description Category not found */
        404: never;
      };
    };
    /**
     * @description Will update the following items on a category
     *   * name
     *   * is_active
     *   * description
     *   * slo (A new slo will be added to the sla list)
     *   * public_name
     *   * is_public_accessible
     */
    patch: {
      /**
       * @description Will update the following items on a category
       *   * name
       *   * is_active
       *   * description
       *   * slo (A new slo will be added to the sla list)
       *   * public_name
       *   * is_public_accessible
       */
      /** @description JSON data to update signal */
      requestBody: {
        content: {
          "application/json": components["schemas"]["privateCategoryPatch"];
        };
      };
      responses: {
        /** @description Changes are made, returns the current state of the category */
        200: {
          content: {
            "application/json": components["schemas"]["privateCategoryResponse"];
          };
        };
        /** @description Bad request. */
        400: never;
        /** @description Not authenticated, may be caused by expired token */
        401: never;
        /** @description Category not found */
        404: never;
      };
    };
    parameters: {
        /** @description ID of category */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/terms/categories/{main_slug}/status-message-templates/": {
    /** @description List of all status message templates for the selected category per state */
    get: {
      /** @description List of all status message templates for the selected category per state */
      responses: {
        /** @description List of all categories available in the system */
        200: {
          content: {
            "application/json": components["schemas"]["privateCategoryStatusMessageTemplatesResponse"];
          };
        };
      };
    };
    /** @description Create/Update all status message templates for the selected category per state */
    post: {
      /** @description Create/Update all status message templates for the selected category per state */
      /** @description Serialized new user data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["privateCategoryStatusMessageTemplatesRequest"];
        };
      };
      responses: {
        /** @description Status message templates created */
        201: {
          content: {
            "application/json": components["schemas"]["privateCategoryStatusMessageTemplatesResponse"];
          };
        };
      };
    };
    parameters: {
        /** @description Slug that identifies the main category. */
      path: {
        main_slug: string;
      };
    };
  };
  "/signals/v1/private/terms/categories/{main_slug}/sub_categories/{sub_slug}/status-message-templates/": {
    /** @description List of all status message templates for the selected category per state */
    get: {
      /** @description List of all status message templates for the selected category per state */
      responses: {
        /** @description List of all categories available in the system */
        200: {
          content: {
            "application/json": components["schemas"]["privateCategoryStatusMessageTemplatesResponse"];
          };
        };
      };
    };
    /** @description Create/Update all status message templates for the selected category per state */
    post: {
      /** @description Create/Update all status message templates for the selected category per state */
      /** @description Serialized new user data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["privateCategoryStatusMessageTemplatesRequest"];
        };
      };
      responses: {
        /** @description Status message templates created */
        201: {
          content: {
            "application/json": components["schemas"]["privateCategoryStatusMessageTemplatesResponse"];
          };
        };
      };
    };
    parameters: {
        /** @description Slug that identifies the main category. */
        /** @description Slug that identifies the sub category. */
      path: {
        main_slug: string;
        sub_slug: string;
      };
    };
  };
  "/signals/v1/private/csv": {
    /** @description Retrieve datawarehouse csv dump as zip file if authorised (requires reporting permission) */
    get: {
      /** @description Retrieve datawarehouse csv dump as zip file if authorised (requires reporting permission) */
      responses: {
        /** @description zip file containing csv files */
        200: never;
        /** @description Not authenticated, may be caused by expired token */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
        /** @description If no csv was generated */
        404: never;
      };
    };
  };
  "/signals/v1/private/users/": {
    /** @description Retrieve list of all users. */
    get: {
      /** @description Retrieve list of all users. */
      parameters?: {
          /** @description Filter by username, allows partial matches */
          /** @description Filter active (true) and inactive (false). */
          /** @description Filter users by role, accepts one or more role names. */
          /** @description Filter users by department, accepts one or more department codes. */
        query?: {
          username?: string;
          is_active?: string;
          role?: string;
          profile_department_code?: string;
        };
      };
      responses: {
        /** @description List of all users. */
        200: {
          content: {
            "application/json": components["schemas"]["privateUserListResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
      };
    };
    /** @description Create a new user. */
    post: {
      /** @description Create a new user. */
      /** @description Serialized new user data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["userCreate"];
        };
      };
      responses: {
        /** @description JSON serialization of detailed newly created SIA user data. */
        201: {
          content: {
            "application/json": components["schemas"]["privateUserDetailResponse"];
          };
        };
        /** @description Bad request. Posted new user data did not validate. */
        400: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
  };
  "/signals/v1/private/users/{id}": {
    /** @description Retrieve user by id. */
    get: {
      /** @description Retrieve user by id. */
      responses: {
        /** @description JSON serialization of detailed SIA user data. */
        200: {
          content: {
            "application/json": components["schemas"]["privateUserDetailResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
    /** @description Partial update of user data. */
    patch: {
      /** @description Partial update of user data. */
      responses: {
        /** @description User data successfully updated. */
        200: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
    parameters: {
        /** @description ID of user */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/me/": {
    /** @description Retrieve loggedin user data. */
    get: {
      /** @description Retrieve loggedin user data. */
      responses: {
        /** @description JSON serialization of detailed SIA loggedin user data. */
        200: {
          content: {
            "application/json": components["schemas"]["privateUserDetailResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
  };
  "/signals/v1/private/me/filters/": {
    /** @description Retrieve stored signal filters for the loggedin User */
    get: {
      /** @description Retrieve stored signal filters for the loggedin User */
      responses: {
        /** @description JSON serialization of the stored Signal filters */
        200: {
          content: {
            "application/json": components["schemas"]["privateStoredSignalFilterResponseList"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
    /** @description Creation of a stored Signal filter. */
    post: {
      /** @description Creation of a stored Signal filter. */
      /** @description JSON serialized stored Signal filter data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["privateStoredSignalFilterRequest"];
        };
      };
      responses: {
        /** @description stored Signal filter successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["privateStoredSignalFilterResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
  };
  "/signals/v1/private/me/filters/{id}": {
    /** @description Retrieve stored Signal filter */
    get: {
      /** @description Retrieve stored Signal filter */
      responses: {
        /** @description JSON serialization of the stored Signal filter */
        200: {
          content: {
            "application/json": components["schemas"]["privateStoredSignalFilterResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
    /** @description Delete a stored Signal filter. */
    delete: {
      /** @description Delete a stored Signal filter. */
      responses: {
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
        /** @description stored Signal filter successfully deleted. */
        410: never;
      };
    };
    /** @description Partial update of the stored Signal filter. */
    patch: {
      /** @description Partial update of the stored Signal filter. */
      /** @description JSON serialized stored Signal filter data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["privateStoredSignalFilterRequest"];
        };
      };
      responses: {
        /** @description stored Signal filter successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["privateStoredSignalFilterResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
    parameters: {
        /** @description ID of stored Signal filter */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/departments/": {
    /** @description Retrieve list of departments. */
    get: {
      /** @description Retrieve list of departments. */
      parameters?: {
          /** @description Filter by can_direct property of a department, `true` if a department has the ability to direct a parent Signal/hoofdmelding else `false`. */
        query?: {
          can_direct?: string;
        };
      };
      responses: {
        /** @description List of departments. */
        200: {
          content: {
            "application/json": components["schemas"]["privateDepartmentListResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
    /** @description Create a department. */
    post: {
      /** @description Create a department. */
      /** @description JSON serialized new department data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["departmentCreate"];
        };
      };
      responses: {
        /** @description Detailed department data after creation. */
        200: never;
        /** @description Bad request. */
        400: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
  };
  "/signals/v1/private/departments/{id}": {
    /** @description Retrieve detailed data for a department. */
    get: {
      /** @description Retrieve detailed data for a department. */
      responses: {
        /** @description Detailed department data. */
        200: {
          content: {
            "application/json": components["schemas"]["privateDepartmentDetailResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
        /** @description Not Found. */
        404: never;
      };
    };
    /** @description (Partial) update of department data. */
    patch: {
      /** @description (Partial) update of department data. */
      /** @description JSON serialized new department data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["departmentPatch"];
        };
      };
      responses: {
        /** @description Detailed department data after successful update. */
        200: never;
        /** @description Bad request. */
        400: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
        /** @description Not Found. */
        404: never;
      };
    };
    parameters: {
        /** @description ID of department */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/expressions/": {
    /** @description (EXPERIMENTAL) An expression is a simple piece of code such as 'a > 1'. It can be used as a domain specific language for condition evaluation. We could evaluate an condition such as 'location in area' and use the result to perform actions. The expressions are configurable and don't require a developer to add logic. Currently it is being used to dynamically filter signal attributes. But it is generic and can be used on arbitrary objects. */
    get: {
      /** @description (EXPERIMENTAL) An expression is a simple piece of code such as 'a > 1'. It can be used as a domain specific language for condition evaluation. We could evaluate an condition such as 'location in area' and use the result to perform actions. The expressions are configurable and don't require a developer to add logic. Currently it is being used to dynamically filter signal attributes. But it is generic and can be used on arbitrary objects. */
      responses: {
        /** @description List of expressions. */
        200: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
    /** @description Create a expression. */
    post: {
      /** @description Create a expression. */
      /** @description JSON serialized new expression data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["expressionCreate"];
        };
      };
      responses: {
        /** @description Detailed expression data after creation. */
        200: never;
        /** @description Bad request. */
        400: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
      };
    };
  };
  "/signals/v1/private/expressions/context": {
    /** @description Retrieve collection of available expression identifiers/types for a context. */
    get: {
      /** @description Retrieve collection of available expression identifiers/types for a context. */
      responses: {
        /** @description Detailed expression context data. */
        200: {
          content: {
            "application/json": components["schemas"]["V1PrivateExpressionContextGet"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
        /** @description Not Found. */
        404: never;
      };
    };
    parameters: {
        /** @description A context is used to categorized expressions (similar to a type). We could have 'routing' and 'email' contexes. The 'routing' context is used for signal routing for example. */
      query: {
        type: string;
      };
    };
  };
  "/signals/v1/private/expressions/{id}": {
    /** @description Retrieve detailed data for a expression. */
    get: {
      /** @description Retrieve detailed data for a expression. */
      responses: {
        /** @description Detailed department data. */
        200: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
        /** @description Not Found. */
        404: never;
      };
    };
    /** @description delete expression. */
    delete: {
      /** @description delete expression. */
      responses: {
        /** @description successful delete. */
        204: never;
        /** @description Bad request. */
        400: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
        /** @description Not Found. */
        404: never;
      };
    };
    /** @description (Partial) update of expression data. */
    patch: {
      /** @description (Partial) update of expression data. */
      /** @description JSON serialized new expression data. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["expressionPatch"];
        };
      };
      responses: {
        /** @description Detailed expression data after successful update. */
        200: never;
        /** @description Bad request. */
        400: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
        /** @description Not Found. */
        404: never;
      };
    };
    parameters: {
        /** @description ID of expression */
      path: {
        id: number;
      };
    };
  };
  "/signals/v1/private/areas/geography/": {
    /** @description Retrieve a list of areas in the database. Experimental, the content of the response can still be changed */
    get: {
      /** @description Retrieve a list of areas in the database. Experimental, the content of the response can still be changed */
      parameters?: {
          /** @description Filter returns only areas with a certain code. Can be used to filter on multiple type codes. For example the code for stadsdeel centrum van amsterdam "03630000000018" */
          /** @description Filter returns only areas of a certain type. Can be used to filter on multiple type codes. For example a "buurt" or a "stadsdeel" or combination of these codes. */
        query?: {
          code?: string;
          type_code?: string;
        };
      };
      responses: {
        /** @description List of area data GEOjson */
        200: {
          headers: {
            /** @description The total areas in the database */
            "X-Total-Count"?: number;
            /** @description The pagination links for GEOjson list endpoints */
            Links?: string;
          };
          content: {
            "application/json": components["schemas"]["V1AreasGEOJsonList"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
        /** @description Not Found. */
        404: never;
      };
    };
  };
  "/signals/v1/public/areas/geography/": {
    /** @description Retrieve a list of areas in the database. Experimental, the content of the response can still be changed */
    get: {
      /** @description Retrieve a list of areas in the database. Experimental, the content of the response can still be changed */
      parameters?: {
          /** @description Filter returns only areas with a certain code. Can be used to filter on multiple type codes. For example the code for stadsdeel centrum van amsterdam "03630000000018" */
          /** @description Filter returns only areas of a certain type. Can be used to filter on multiple type codes. For example a "buurt" or a "stadsdeel" or combination of these codes. */
        query?: {
          code?: string;
          type_code?: string;
        };
      };
      responses: {
        /** @description List of area data GEOjson */
        200: {
          headers: {
            /** @description The total areas in the database */
            "X-Total-Count"?: number;
            /** @description The pagination links for GEOjson list endpoints */
            Links?: string;
          };
          content: {
            "application/json": components["schemas"]["V1AreasGEOJsonList"];
          };
        };
        /** @description Not Found. */
        404: never;
      };
    };
  };
  "/signals/v1/private/areas/": {
    /** @description Retrieve a list of areas in the database. Experimental, the content of the response can still be changed */
    get: {
      /** @description Retrieve a list of areas in the database. Experimental, the content of the response can still be changed */
      parameters?: {
          /** @description Filter returns only areas with a certain code. Can be used to filter on multiple type codes. For example the code for stadsdeel centrum van amsterdam "03630000000018". */
          /** @description Filter returns only areas of a certain type. Can be used to filter on multiple type codes. For example a "buurt" or a "stadsdeel" or combination of these codes. */
        query?: {
          code?: string;
          type_code?: string;
        };
      };
      responses: {
        /** @description List of area data json */
        200: {
          content: {
            "application/json": components["schemas"]["V1AreasJsonList"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Forbidden. */
        403: never;
        /** @description Not Found. */
        404: never;
      };
    };
  };
  "/signals/v1/public/areas/": {
    /** @description Retrieve a list of areas in the database. Experimental, the content of the response can still be changed */
    get: {
      /** @description Retrieve a list of areas in the database. Experimental, the content of the response can still be changed */
      parameters?: {
          /** @description Filter returns only areas with a certain code. Can be used to filter on multiple type codes. For example the code for stadsdeel centrum van amsterdam "03630000000018" */
          /** @description Filter returns only areas of a certain type. Can be used to filter on multiple type codes. For example a "buurt" or a "stadsdeel" or combination of these codes. */
        query?: {
          code?: string;
          type_code?: string;
        };
      };
      responses: {
        /** @description List of area data json */
        200: {
          content: {
            "application/json": components["schemas"]["V1AreasJsonList"];
          };
        };
        /** @description Not Found. */
        404: never;
      };
    };
  };
  "/signals/v1/public/questions/": {
    /** @description Retrieve a list of questions in the database. Experimental, the content of the response can still be changed */
    get: {
      /** @description Retrieve a list of questions in the database. Experimental, the content of the response can still be changed */
      parameters: {
          /** @description Slug that identifies the main category. Only questions related to the main category is returned if only the main_slug is provided. */
          /** @description Slug that identifies the sub category. Questions are returned for main_slug and sub_slug (sorted on main_slug.order, sub_slug.order) */
        query: {
          main_slug: string;
          sub_slug: string;
        };
      };
      responses: {
        /** @description List of questions data json */
        200: {
          content: {
            "application/json": components["schemas"]["V1QuestionsJsonList"];
          };
        };
        /** @description Not Found. */
        404: never;
      };
    };
  };
  "/signals/v1/public/feedback/standard_answers/": {
    /** @description Retrieve a list of all standard answers than can be given during a feedback round */
    get: {
      /** @description Retrieve a list of all standard answers than can be given during a feedback round */
      responses: {
        /** @description List of questions data json */
        200: {
          content: {
            "application/json": components["schemas"]["V1StandardAnswersList"];
          };
        };
        /** @description Not Found. */
        404: never;
      };
    };
  };
  "/signals/v1/private/sources/": {
    /** @description Retrieve a list of signal sources. */
    get: {
      /** @description Retrieve a list of signal sources. */
      parameters?: {
          /** @description Filter by "is_active" flag */
          /** @description Filter by "can_be_selected" flag */
        query?: {
          is_active?: boolean;
          can_be_selected?: boolean;
        };
      };
      responses: {
        /** @description List of signal sources */
        200: {
          content: {
            "application/json": components["schemas"]["V1SourceList"];
          };
        };
        /** @description Not Found. */
        404: never;
      };
    };
  };
  "/signals/v1/private/autocomplete/usernames/": {
    /** @description Retrieve list of usernames filtered on username. */
    get: {
      /** @description Retrieve list of usernames filtered on username. */
      parameters: {
          /** @description Filter by username, allows partial matches (must be at least 3 characters long) */
        query: {
          username: string;
        };
      };
      responses: {
        /** @description List of usernames. */
        200: {
          content: {
            "application/json": components["schemas"]["privateUsernameListResponse"];
          };
        };
        /** @description Filter username not provided or filter username too short. */
        400: never;
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
      };
    };
  };
  "/signals/v1/private/reports/signals/open/": {
    /**
     * @description Selects all Signals in a "open" state that have surpassed by a factor 3 of the deadline.
     * A Signal is considered to be in a "open" state if the status is NOT in one of the following states:
     *   - AFGEHANDELD
     *   - GEANNULEERD
     *   - GESPLITST
     * 
     * Returns a total count of these Signals + a count per category.
     */
    get: {
      /**
       * @description Selects all Signals in a "open" state that have surpassed by a factor 3 of the deadline.
       * A Signal is considered to be in a "open" state if the status is NOT in one of the following states:
       *   - AFGEHANDELD
       *   - GEANNULEERD
       *   - GESPLITST
       * 
       * Returns a total count of these Signals + a count per category.
       */
      parameters?: {
          /** @description Filters Signals created after this datetime */
          /** @description Filters Signals created before this datetime */
        query?: {
          start?: string;
          end?: string;
        };
      };
      responses: {
        /** @description Returns a total count of Signals in a "open" state + a count per category */
        200: {
          content: {
            "application/json": components["schemas"]["privateReportResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
      };
    };
  };
  "/signals/v1/private/reports/signals/reopen-requested/": {
    /** @description Returns a total count of Signals in the "reopen requested" state + a count per category */
    get: {
      /** @description Returns a total count of Signals in the "reopen requested" state + a count per category */
      parameters?: {
          /** @description Filters Signals put in the  "reopen requested" state after this datetime */
          /** @description Filters Signals put in the  "reopen requested" state before this datetime */
        query?: {
          start?: string;
          end?: string;
        };
      };
      responses: {
        /** @description Returns a total count of Signals in the "reopen requested" state + a count per category */
        200: {
          content: {
            "application/json": components["schemas"]["privateReportResponse"];
          };
        };
        /** @description Not authenticated, may be caused by expired token. */
        401: never;
        /** @description Not authorized to access this endpoint. */
        403: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description Status string (predefined). 
     * @enum {string}
     */
    StatusStateChoices: "m" | "i" | "b" | "h" | "o" | "a" | "s" | "reopened" | "closure requested" | "ingepland" | "reopen requested" | "reaction requested" | "reaction received" | "forward to external" | "ready to send" | "sent" | "send failed" | "done external";
    /** @enum {string} */
    PriorityPriorityChoices: "normal" | "high" | "low";
    /**
     * @example SIG 
     * @enum {string}
     */
    TypeCodeChoices: "SIG" | "REQ" | "QUE" | "COM" | "MAI";
    /** @description JSON Data for location of this Signal. */
    _NestedLocationRequestData: {
      stadsdeel?: string;
      buurt_code?: string;
      /** @description Code of specific geographic area this Signal lies in. */
      area_code?: string | null;
      /** @description Name of specific geographic area this Signal lies in. */
      area_name?: string | null;
      /** @description Code for the geographic area type used to localize Signals. */
      area_type_code?: string | null;
      address?: {
        openbare_ruimte?: string;
        huisnummer?: number;
        huisletter?: string;
        huisnummer_toevoeging?: number;
        postcode?: string;
        woonplaats?: string;
      };
      geometrie?: {
        type: string;
        coordinates?: number[];
      };
      extra_properties?: string;
    };
    /** @description JSON Data */
    _NestedLocationResponseData: {
      /** @example E */
      stadsdeel?: string;
      /** @example E17a */
      buurt_code?: string;
      address?: {
        /** @example 1053KP */
        postcode?: string;
        /** @example */
        huisletter?: string | null;
        /** @example 157 */
        huisnummer?: string;
        /** @example Amsterdam */
        woonplaats?: string;
        /** @example Bilderdijkstraat */
        openbare_ruimte?: string;
        /** @example 3 */
        huisnummer_toevoeging?: string;
      };
      /** @example Bilderdijkstraat 157-3 1053KP Amsterdam */
      address_text?: string;
      geometrie?: {
        /** @example Point */
        type?: string;
        /**
         * @example [
         *   4.87170696258545,
         *   52.36805320057393
         * ]
         */
        coordinates?: (number)[];
      };
      /** @example {} */
      extra_properties?: Record<string, never>;
    };
    /** @description JSON Data */
    _NestedStatusRequestData: {
      text?: string;
      state?: components["schemas"]["StatusStateChoices"];
      /** @enum {string|null} */
      target_api?: "sigmax" | "" | null;
      /** @description Override reporter email address, only relevant for "forwarded to external" (Dutch "Doorgezet naar extern") flow. This email address is used to send an email with request to an external party. */
      email_override?: string;
      /** @description Send email to reporter if true else not; subject to business rules. */
      send_email?: boolean;
      extra_properties?: string;
    };
    /** @description JSON Data */
    _NestedStatusResponseData: {
      /** @example null */
      text?: string | null;
      state?: components["schemas"]["StatusStateChoices"];
      /** @example sigmax */
      target_api?: string | null;
      /** @example {} */
      extra_properties?: Record<string, never>;
      /** @example test@test.com */
      created_by?: string | null;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      created_at?: string;
    };
    /** @description JSON Data */
    _NestedCategoryRequestData: {
      /**
       * Format: uri 
       * @example https://api.data.amsterdam.nl/signals/v1/public/terms/categories/overig/sub_categories/overig
       */
      sub_category?: string;
      /** @description Message to log with category update, will show in logs. */
      text?: string;
    };
    /** @description JSON Data */
    _NestedCategoryResponseData: {
      /** @example Overlast terrassen */
      sub?: string;
      /** @example overlast-terrassen */
      sub_slug?: string;
      /** @example Overlast Bedrijven en Horeca */
      main?: string;
      /** @example overlast-bedrijven-en-horeca */
      main_slug?: string;
      /**
       * Format: uri 
       * @example http://127.0.0.1:8000/signals/v1/public/terms/categories/overlast-bedrijven-en-horeca/sub_categories/overlast-terrassen
       */
      category_url?: string;
      /** @example VTH */
      departments?: string;
      /** @example null */
      created_by?: string | null;
      /** @example null */
      text?: string | null;
      /**
       * Format: date-time 
       * @description Deadline if available. Note this field may be moved based on user feedback.
       */
      deadline?: string | null;
      /**
       * Format: date-time 
       * @description Deadline delayed by a factor three if available. Note this field may be moved based on user feedback.
       */
      deadline_factor_3?: string | null;
    };
    /** @description JSON Data */
    _NestedReporterRequestData: {
      /**
       * Format: email 
       * @description Email address of reporter.
       */
      email?: string;
      /** @description Phone number of reporter. */
      phone?: string;
      /** @description Reporter allows their contact information to be shared (true) or not (false). */
      sharing_allowed?: boolean;
    };
    /** @description JSON Data */
    _NestedReporterResponseData: {
      /** @example test@test.com */
      email?: string | null;
      /** @example */
      phone?: string | null;
      /**
       * @description Reporter allows their contact information to be shared (true) or not (false). 
       * @example false
       */
      sharing_allowed?: boolean;
      /**
       * @description Check if the reporter wants to be contacted or not 
       * @example true
       */
      allows_contact?: boolean;
    };
    /** @description JSON Data */
    _NestedPriorityRequestData: {
      priority?: components["schemas"]["PriorityPriorityChoices"];
    };
    /** @description JSON Data */
    _NestedPriorityResponseData: {
      priority?: components["schemas"]["PriorityPriorityChoices"];
      /** @example test@test.com */
      created_by?: string | null;
    };
    /** @description JSON Data */
    _NestedNoteRequestData: {
      text?: string;
    };
    /** @description JSON Data */
    _NestedDirectingDepartmentRequestData: {
      /** @example 1 */
      id?: number;
    };
    /** @description JSON Data */
    _NestedNoteResponseData: {
      /** @example De statusupdate is per e-mail verzonden aan de melder */
      text?: string;
      /** @example test@test.com */
      created_by?: string | null;
    };
    /** @description JSON Data */
    _NestedTypeRequestData: {
      code?: components["schemas"]["TypeCodeChoices"];
    };
    /** @description JSON Data */
    _NestedTypeResponseData: {
      code?: components["schemas"]["TypeCodeChoices"];
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      created_at?: string;
      /** @example test@test.com */
      created_by?: string | null;
    };
    /** @description JSON Data of a directing department, can only be set on a parent Signal */
    _NestedDirectingDepartmentResponseData: {
      /** @example 1 */
      id?: number;
      /** @example ASC */
      code?: string;
      /** @example Actie service centrum */
      name?: string;
      /** @example false */
      is_intern?: boolean;
    };
    /** @description JSON Data of a routing department, can only be set on a parent Signal */
    _NestedRoutingDepartmentResponseData: {
      /** @example 1 */
      id?: number;
      /** @example ASC */
      code?: string;
      /** @example Actie service centrum */
      name?: string;
      /** @example false */
      is_intern?: boolean;
    };
    /** @description JSON data for creation of Signals/meldingen in bulk (private version). When creating children all items in the list must belong to the same parent. Can also be used to create "normal" Signals/meldingen (Signals/meldingen withouth a parent link). */
    V1PrivateSignalPostBulk: (components["schemas"]["V1PrivateSignalPost"])[];
    /** @description JSON data for creation of Signal/melding (private version). */
    V1PrivateSignalPost: {
      /** @example online */
      source?: string;
      /**
       * @description The complaint 
       * @example Er ligt vuilnis midden op straat
       */
      text: string;
      /** @example Extra tekst kan hier worden meegegeven, dit veld is niet verplicht */
      text_extra?: string | null;
      location: components["schemas"]["_NestedLocationRequestData"];
      reporter: components["schemas"]["_NestedReporterRequestData"];
      category: components["schemas"]["_NestedCategoryRequestData"];
      priority?: components["schemas"]["_NestedPriorityRequestData"];
      type?: components["schemas"]["_NestedTypeRequestData"];
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      incident_date_start: string;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      incident_date_end?: string | null;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      operational_date?: string | null;
      /** @example {} */
      extra_properties?: Record<string, never>;
      /** @description Makes the given Signal a parent of the newly created (child) Signal */
      parent?: number;
      /** @description A list of directing departments that can be set on a parent Signal. For each object in the list only the id is required. */
      directing_departments?: (components["schemas"]["_NestedDirectingDepartmentRequestData"])[];
      attachments?: (string)[];
      /**
       * @description The UUID of a Session containing the answers of a specific Questionnaire 
       * @example 00000000-0000-0000-0000-000000000000
       */
      session?: string | null;
    };
    /** @description JSON data for creation of Signal/melding (public version). */
    V1PublicSignalPost: {
      /**
       * @description This field is optional, if not given the source will be set to "online". Only Sources that are defined public can be used. 
       * @example online
       */
      source?: string;
      /**
       * @description The complaint 
       * @example Er ligt vuilnis op straat.
       */
      text: string;
      text_extra?: string | null;
      location: components["schemas"]["_NestedLocationRequestData"];
      category?: components["schemas"]["_NestedCategoryRequestData"];
      reporter?: components["schemas"]["_NestedReporterRequestData"];
      /**
       * Format: date-time 
       * @description Start of nuisance or problem. 
       * @example 2020-01-01T00:00:00+00:00
       */
      incident_date_start: string;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      incident_date_end?: string | null;
      /** @example [] */
      extra_properties?: (Record<string, never>)[];
      /**
       * @description The UUID of a Session containing the answers of a specific Questionnaire 
       * @example 00000000-0000-0000-0000-000000000000
       */
      session?: string | null;
    };
    V1PrivateSignalPatch: {
      location?: components["schemas"]["_NestedLocationRequestData"];
      status?: components["schemas"]["_NestedStatusRequestData"];
      category?: components["schemas"]["_NestedCategoryRequestData"];
      priority?: components["schemas"]["_NestedPriorityRequestData"];
      type?: components["schemas"]["_NestedTypeRequestData"];
      notes?: components["schemas"]["_NestedNoteRequestData"];
      /** @example {} */
      extra_properties?: Record<string, never>;
      /** @description A list of directing departments that can be set on a parent Signal. For each object in the list only the id is required. */
      directing_departments?: (components["schemas"]["_NestedDirectingDepartmentRequestData"])[];
    };
    /** @description JSON serialization of paginated list of signals */
    V1PrivateSignalListGet: {
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of current page 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/
           */
          href?: string;
        };
        next?: {
          /**
           * Format: uri 
           * @description URI of the next page 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/?page=2
           */
          href?: string | null;
        };
        previous?: {
          /**
           * Format: uri 
           * @description URI of the previous page 
           * @example null
           */
          href?: string | null;
        };
      };
      /**
       * @description Total count of results for the request 
       * @example 10
       */
      count?: number;
      /** @description A list of signals, paginated */
      results?: (components["schemas"]["V1PrivateSignalDetailList"])[];
    };
    /** @description Detailed JSON serialization of SIA Signals/meldingen. */
    V1PrivateSignalDetailList: {
      _links?: {
        /** @description HAL JSON links */
        _link?: {
          self?: {
            /**
             * Format: uri 
             * @description URI of this user in API 
             * @example http://127.0.0.1:8000/signals/v1/private/signals/1
             */
            href?: string;
          };
        };
      };
      /**
       * @description Textual representation of signal for display purposes. 
       * @example 1 - m - E17a - 2020-01-01 00:00:00.000000+00:00
       */
      _display?: string;
      category?: components["schemas"]["_NestedCategoryResponseData"];
      /**
       * @description ID of the signal 
       * @example 1
       */
      id?: number;
      /**
       * Format: uuid 
       * @description Public identifier for SIA signal, use on public detail endpoint.
       */
      signal_id?: string;
      /** @example false */
      has_attachments?: boolean;
      location?: components["schemas"]["_NestedLocationResponseData"];
      status?: components["schemas"]["_NestedStatusResponseData"];
      reporter?: components["schemas"]["_NestedReporterResponseData"];
      priority?: components["schemas"]["_NestedPriorityResponseData"];
      /**
       * @example [
       *   {
       *     "text": "Automatische e-mail bij registratie van de melding is verzonden aan de melder.",
       *     "created_by": "test@test.com"
       *   },
       *   {
       *     "text": "De statusupdate is per e-mail verzonden aan de melder",
       *     "created_by": "test@test.com"
       *   }
       * ]
       */
      notes?: (components["schemas"]["_NestedNoteResponseData"])[];
      type?: components["schemas"]["_NestedTypeResponseData"];
      directing_departments?: (components["schemas"]["_NestedDirectingDepartmentResponseData"])[];
      /** @example Telefoon – ASC */
      source?: string;
      /** @example Het cafe op de hoek maakt enorme herrie */
      text?: string;
      /** @example null */
      text_extra?: string | null;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      updated_at?: string;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      incident_date_start?: string;
      /**
       * Format: date-time 
       * @example 2022-01-01T00:00:00+00:00
       */
      incident_date_end?: string | null;
      /**
       * Format: date-time 
       * @example 2022-01-01T00:00:00+00:00
       */
      operational_date?: string | null;
      has_parent?: boolean;
      has_children?: boolean;
      /**
       * @description The extra_properties field is used to store the additional questions and answers (questionnaire) that are filled out by a reporter. This field contains valid JSON and is generated by the frontend application. The API only performs a couple of simple checks on the format of the provided JSON. This leaves considerable freedom to the frontend application with regards to the actual content.
       * What checks the API performs can be found in the following JSON schemas: - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties.json - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties_streetlights.json
       */
      extra_properties?: Record<string, unknown> | null;
      routing_departments?: (components["schemas"]["_NestedRoutingDepartmentResponseData"])[] | null;
      /**
       * Format: email 
       * @description The assigned user's email address
       */
      assigned_user_email?: string | null;
    };
    /** @description Geography */
    V1PrivateSignalListGetGeography: {
      /** @example FeatureCollection */
      type?: string;
      features?: ({
          /** @example Feature */
          type?: string;
          geometry?: {
            /** @example Point */
            type?: string;
            /**
             * @example [
             *   4.890986949631043,
             *   52.41875227274259
             * ]
             */
            coordinates?: (number)[];
          };
          properties?: {
            /**
             * @description The ID of the Signal 
             * @example 1
             */
            id?: number;
            /**
             * Format: date-time 
             * @example 2020-01-01T00:00:00+00:00
             */
            created_at?: string;
          };
        })[];
    };
    /** @description Detailed JSON serialization of SIA Signals/meldingen when creating them in bulk. */
    V1PrivateSignalDetailGetBulk: (components["schemas"]["V1PrivateSignalDetailGet"])[];
    /** @description Detailed JSON serialization of a SIA Signal/melding. */
    V1PrivateSignalDetailGet: {
      _links?: {
        curies?: {
          /**
           * @description The compact URI (curie) named 'sia' 
           * @example sia
           */
          name?: string;
          /** @example http://127.0.0.1:8000/signals/v1/relations */
          href?: string;
        };
        /** @description HAL JSON links */
        _link?: {
          self?: {
            /**
             * Format: uri 
             * @description URI of this user in API 
             * @example http://127.0.0.1:8000/signals/v1/private/signals/123
             */
            href?: string;
          };
        };
        archives?: {
          /**
           * Format: uri 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/123/history
           */
          href?: string;
        };
        "sia:attachments"?: {
          /**
           * Format: uri 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/123/attachments
           */
          href?: string;
        };
        "sia:pdf"?: {
          /**
           * Format: uri 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/123/pdf
           */
          href?: string;
        };
      };
      /**
       * @description Textual representation of signal for display purposes. 
       * @example 123 - m - E17a - 2020-01-01 00:00:00.000000+00:00
       */
      _display?: string;
      category?: components["schemas"]["_NestedCategoryResponseData"];
      /**
       * @description ID of the signal 
       * @example 123
       */
      id?: number;
      /** @example false */
      has_attachments?: boolean;
      location?: components["schemas"]["_NestedLocationResponseData"];
      status?: components["schemas"]["_NestedStatusResponseData"];
      reporter?: components["schemas"]["_NestedReporterResponseData"];
      priority?: components["schemas"]["_NestedPriorityResponseData"];
      /**
       * @example {
       *   "example": [
       *     {
       *       "text": "Automatische e-mail bij registratie van de melding is verzonden aan de melder.",
       *       "created_by": "test@test.com"
       *     },
       *     {
       *       "text": "De statusupdate is per e-mail verzonden aan de melder",
       *       "created_by": "test@test.com"
       *     }
       *   ]
       * }
       */
      notes?: (components["schemas"]["_NestedNoteResponseData"])[];
      type?: components["schemas"]["_NestedTypeResponseData"];
      /** @example Telefoon – ASC */
      source?: string;
      /** @example Het cafe op de hoek maakt enorme herrie */
      text?: string;
      /** @example null */
      text_extra?: string | null;
      /**
       * @description The extra_properties field is used to store the additional questions and answers (questionnaire) that are filled out by a reporter. This field contains valid JSON and is generated by the frontend application. The API only performs a couple of simple checks on the format of the provided JSON. This leaves considerable freedom to the frontend application with regards to the actual content.
       * What checks the API performs can be found in the following JSON schemas: - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties.json - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties_streetlights.json
       */
      extra_properties?: Record<string, unknown> | null;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      updated_at?: string;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      incident_date_start?: string;
      /**
       * Format: date-time 
       * @example null
       */
      incident_date_end?: string | null;
      directing_departments?: (components["schemas"]["_NestedDirectingDepartmentResponseData"])[];
      routing_departments?: (components["schemas"]["_NestedRoutingDepartmentResponseData"])[] | null;
      attachments?: (string)[];
      /**
       * Format: email 
       * @description The assigned user's email address
       */
      assigned_user_email?: string | null;
    };
    /** @description Detailed JSON serialization of a SIA Signal. */
    V1PublicSignalDetailGet: {
      /**
       * @description Textual representation of signal for display purposes. 
       * @example SIA-123
       */
      _display?: string;
      /**
       * Format: uuid 
       * @description Public identifier for SIA signal, use on public detail endpoint.
       */
      signal_id?: string;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      updated_at?: string;
      /**
       * Format: date-time 
       * @example 2020-01-01T00:00:00+00:00
       */
      incident_date_start?: string;
      /**
       * Format: date-time 
       * @example null
       */
      incident_date_end?: string | null;
      /** @description Filtered status of Signal. */
      status?: {
        /** @description Public state code either "OPEN" or "CLOSED". */
        state?: string;
        /** @description Public state display text. */
        state_display?: string;
      };
    };
    /** @description Signals in a GEOjson format */
    V1PublicSignalGeographyGEOJson: {
      /** @example FeatureCollection */
      type?: string;
      features?: ({
          /** @example Feature */
          type?: string;
          geometry?: {
            /** @example Point */
            type?: string;
            /**
             * @example [
             *   4.890986949631043,
             *   52.41875227274259
             * ]
             */
            coordinates?: (number)[];
          };
          properties?: {
            /** @description The category the signal is in */
            category?: {
              /**
               * @description The public name of the category (fallback is the internal name) 
               * @example Zwerfvuil op straat
               */
              name?: Record<string, never>;
              /**
               * @description The slug of the category 
               * @example zwerfvuil-op-straat
               */
              slug?: Record<string, never>;
              /** @description The parent category the signal is in */
              parent?: {
                /**
                 * @description The public name of the parent category (fallback is the internal name) 
                 * @example Afval
                 */
                name?: Record<string, never>;
                /**
                 * @description The slug of the parent category 
                 * @example afval
                 */
                slug?: Record<string, never>;
              };
            };
            /**
             * Format: date-time 
             * @example 2022-02-24T00:00:00+00:00
             */
            created_at?: string;
          };
        })[];
    };
    /** @description JSON data for user creation */
    userCreate: {
      /**
       * Format: email 
       * @description Username in SIA, will be shown in interface.
       */
      username: string;
      first_name?: string;
      last_name?: string;
      /** @description User is active (true) or inactive (false), the default is true */
      is_active?: boolean;
      role_ids?: (number)[];
      /** @description User profile. */
      profile?: {
        department_ids?: (number)[];
        /** @description Note on this new user. */
        note?: string;
      };
    };
    /** @description JSON data for user update */
    userPatch: {
      first_name?: string;
      last_name?: string;
      /** @description User is active (true) or inactive (false) */
      is_active?: boolean;
      role_ids?: (number)[];
      /** @description User profile. */
      profile?: {
        department_ids?: (number)[];
        /** @description Note on this new user. */
        note?: string;
      };
    };
    /** @description JSON data describing the public category response */
    publicCategoryListResponse: {
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI to the list endpoint
           */
          href?: string;
        };
        next?: {
          /**
           * Format: uri 
           * @description URI to the next page of the list endpoint (if not available this is null)
           */
          href?: string;
        };
        previous?: {
          /**
           * Format: uri 
           * @description URI to the previous page of the list endpoint (if not available this is null)
           */
          href?: string;
        };
      };
      /** @description Total count of results for the request */
      count?: number;
      /** @description A list of categories, paginated */
      results?: (components["schemas"]["publicCategoryParentResponse"])[];
    };
    /** @description JSON data describing the public parent category response */
    publicCategoryParentResponse: {
      _links?: {
        curies?: {
          /** @description The compact URI (curie) named 'sia' */
          name?: string;
          /** Format: uri */
          href?: string;
        };
        self?: {
          /**
           * Format: uri 
           * @description URI to the public category
           */
          href?: string;
        };
        /** @description If a icon is set the sia:icon will be present */
        "sia:icon"?: {
          /**
           * Format: uri 
           * @description URI to the category icon
           */
          href?: string;
        };
      };
      /**
       * @description The display value of the category 
       * @example Afval
       */
      _display?: string;
      /**
       * @description The name of the category 
       * @example Afval
       */
      name?: string;
      /**
       * @description The (generated) slug of the category 
       * @example afval
       */
      slug?: string;
      /** @description The public name */
      public_name?: string | null;
      /**
       * @description Returns True if there are child signals that have been marked as public accessible OR True if the parent category has been marked public accessible. If the value is True than the categories contains Signals that can be shown on for example a public map containing Signals in the city (Only certain properties of the  Signal will be exposed). 
       * @example true
       */
      is_public_accessible?: boolean;
      /** @description A list of child categories */
      sub_categories?: (components["schemas"]["publicCategoryChildResponse"])[];
    };
    /** @description JSON data describing the public parent category response */
    publicCategoryChildResponse: {
      _links?: {
        curies?: {
          /** @description The compact URI (curie) named 'sia' */
          name?: string;
          /** Format: uri */
          href?: string;
        };
        self?: {
          /**
           * Format: uri 
           * @description URI to the public category
           */
          href?: string;
        };
        /** @description If a icon is set the sia:icon will be present */
        "sia:icon"?: {
          /**
           * Format: uri 
           * @description URI to the category icon
           */
          href?: string;
        };
      };
      /**
       * @description The display value of the category 
       * @example Asbest / accu
       */
      _display?: string;
      /**
       * @description The name of the category 
       * @example Asbest / accu
       */
      name?: string;
      /**
       * @description The (generated) slug of the category 
       * @example asbest-accu
       */
      slug?: string;
      /** @example A3DMC */
      handling?: string;
      departments?: ({
          /**
           * @description The code of the department 
           * @example ASC
           */
          code?: string;
          /**
           * @description The name of the department 
           * @example Actie service centrum
           */
          name?: string;
          /**
           * @description Department is internal or external 
           * @example true
           */
          is_intern?: boolean;
        })[];
      /**
       * @description If the current category is still active 
       * @example false
       */
      is_active?: boolean;
      /** @description Description of the category */
      description?: string | null;
      /**
       * @description Handling message of the category (this is also mailed to the reporter) 
       * @example We laten u binnen 3 werkdagen weten wat we hebben gedaan...
       */
      handling_message?: string;
      /**
       * @description The public name 
       * @example Asbest / accu (Publieke naam)
       */
      public_name?: string | null;
      /**
       * @description Returns True if the category has been marked public accessible. If the value is True than the category  contains Signals that can be shown on for example a public map containing Signals in the city (Only certain  properties of the Signal will be exposed). 
       * @example true
       */
      is_public_accessible?: boolean;
    };
    /** @description JSON data describing the category response */
    privateCategoryResponse: {
      _links?: {
        curies?: {
          /** @description The compact URI (curie) named 'sia' */
          name?: string;
          href?: string;
        };
        self?: {
          /** @description URI to the private category */
          href?: string;
          /** @description URI to the public category */
          public?: string;
        };
        "sia:status-message-templates"?: {
          /** @description URI to the status message templates of the category */
          href?: string;
        };
        "sia:parent"?: {
          /** @description URI to the private parent category parent */
          href?: string;
          /** @description URI to the public parent category detail */
          public?: string;
        };
        "sia:questionnaire"?: {
          /** @description URI to the public questionnaire */
          href?: string;
        };
      };
      /** @description The display value of the category */
      _display?: string;
      /** @description The id of the category */
      id?: number;
      /** @description The name of the category */
      name?: string;
      /** @description The (generated) slug of the category */
      slug?: string;
      /** @description If the current category is still active */
      is_active?: boolean;
      /** @description Description of the category */
      description?: string;
      /** @description Handling message of the category (this is also mailed to the reporter) */
      handling_message?: string;
      sla?: {
        /** @description Number of days describing the SLA time */
        n_days?: number;
        /** @description If the n_days is in calendar days (true) or working days (false) */
        use_calendar_days?: boolean;
      };
      /** @description A readonly list of departments for the selected category */
      departments?: ({
          /** @description ID of the department */
          id?: number;
          /** @description The code of the department */
          code?: string;
          /** @description The name of the department */
          name?: string;
          /** @description Department is internal or external */
          is_intern?: boolean;
          /** @description The department being created is responsible for given category as identified by the `category_id` (true) or not (false). Defaults to false. */
          is_responsible?: boolean;
          /** @description The department being created can view given category as identified by the `category_id` (true) or not (false). Defaults to false. */
          can_view?: boolean;
        })[];
      /** @description Note field, used internally. */
      note?: string | null;
      /** @description The public name of a Category */
      public_name?: string | null;
      /**
       * @description This will toggle if the category (and it's signals) can be accessed  through the public endpoin(s). Will be used for the public map showing the reporter open siganls in the area for the categroy  he/she is making a complaint. 
       * @default false
       */
      is_public_accessible?: boolean;
    };
    /** @description JSON data describing the category response */
    privateCategoryListResponse: {
      _links?: {
        self?: {
          /** @description URI to the list endpoint */
          href?: string;
        };
        next?: {
          /** @description URI to the next page of the list endpoint (if not available this is null) */
          href?: string;
        };
        previous?: {
          /** @description URI to the previous page of the list endpoint (if not available this is null) */
          href?: string;
        };
      };
      /** @description Total count of results for the request */
      count?: number;
      /** @description A list of categories, paginated */
      results?: (components["schemas"]["privateCategoryResponse"])[];
    };
    /** @description JSON data for category updates */
    privateCategoryPatch: {
      /** @description The name of the category */
      name?: string;
      /** @description Description of the category */
      description?: string;
      /** @description If the current category is still active */
      is_active?: boolean;
      /** @description This will add a new sla to the category */
      new_sla?: {
        /** @description Number of days describing the SLA time */
        n_days?: number;
        /** @description If the n_days is in calendar days (true) or working days (false) */
        use_calendar_days?: boolean;
      };
      /** @description The handling message, used in the e-mail to the reporter */
      handling_message?: string;
      /** @description The public name of a Category */
      public_name?: string | null;
      /** @description This will toggle if the category (and it's signals) can be accessed  through the public endpoin(s). Will be used for the public map showing the reporter open siganls in the area for the categroy  he/she is making a complaint. */
      is_public_accessible?: boolean;
    };
    /** @description JSON data describing the status message templates for a category and state (Request) */
    privateCategoryStatusMessageTemplatesRequest: ({
        /** @example m */
        state?: components["schemas"]["StatusStateChoices"];
        templates?: ({
            /** @example Title of the status message template */
            title?: string;
            /** @example The text of the status message template */
            text?: string;
            /**
             * @description Not required, will default to False 
             * @example true
             */
            is_active?: boolean;
          })[];
      })[];
    /** @description JSON data describing the status message templates for a category and state (Response) */
    privateCategoryStatusMessageTemplatesResponse: ({
        /** @example m */
        state?: components["schemas"]["StatusStateChoices"];
        templates?: ({
            /** @example Title of the status message template */
            title?: string;
            /** @example The text of the status message template */
            text?: string;
            /** @example true */
            is_active?: boolean;
          })[];
      })[];
    /** @description JSON data for a list of departments. */
    privateDepartmentListResponse: {
      _links?: {
        self?: {
          /** @description URI to the list endpoint */
          href?: string;
        };
        next?: {
          /** @description URI to the next page of the list endpoint (if not available this is null) */
          href?: string;
        };
        previous?: {
          /** @description URI to the previous page of the list endpoint (if not available this is null) */
          href?: string;
        };
      };
      /** @description Total count of results for the request */
      count?: number;
      /** @description A list of categories, paginated */
      results?: (components["schemas"]["privateDepartmentResponse"])[];
    };
    /** @description JSON data for a department. */
    privateDepartmentResponse: {
      /** @description HAL JSON links */
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of this department in API
           */
          href?: string;
        };
      };
      /** @description Textual representation of department for display purposes. */
      _display?: string;
      /** @description ID of department */
      id?: number;
      /** @description Name of department */
      name?: string;
      /** @description Three letter code of department */
      code?: string;
      /** @description TBD, defaults to false. */
      is_intern?: boolean;
      /** @description This department can potentially be a directing department if true. */
      can_direct?: boolean;
      category_names?: (string)[];
    };
    /** @description Detailed JSON data for a department. */
    privateDepartmentDetailResponse: {
      _links?: {
        self: {
          /** @description Hyperlink to detailed data of this department. */
          href: string;
        };
      };
      /** @description Textual representation of department for display purposes. */
      _display?: string;
      /** @description ID of department */
      id?: number;
      /** @description Name of department */
      name?: string;
      /** @description Three letter code of department */
      code?: string;
      /** @description TBD, defaults to false. */
      is_intern?: boolean;
      /** @description This department can potentially be a directing department if true. */
      can_direct?: boolean;
      /** @description List of categories associated with this department (both those that are visible to this department and those for which this department is responsible). */
      categories?: (Record<string, never>)[];
    };
    /** @description JSON data for new department */
    departmentCreate: {
      /** @description Name of department */
      name: string;
      /** @description Three letter code of department */
      code: string;
      /** @description TBD, defaults to false. */
      is_intern?: boolean;
      /** @description This department can potentially be a directing department if true. */
      can_direct?: boolean;
      categories?: ({
          /** @description ID of category */
          category_id: number;
          /** @description The department being created is responsible for given category as identified by the `category_id` (true) or not (false). Defaults to false. */
          is_responsible?: boolean;
          /** @description The department being created can view given category as identified by the `category_id` (true) or not (false). Defaults to false. */
          can_view?: boolean;
        })[];
    };
    /** @description JSON data for partial update to department. */
    departmentPatch: {
      /** @description Name of department */
      name?: string;
      /** @description Three letter code of department */
      code?: string;
      /** @description TBD, defaults to false. */
      is_intern?: boolean;
      /** @description This department can potentially be a directing department if true. */
      can_direct?: boolean;
      categories?: ({
          /** @description ID of category */
          category_id?: number;
          /** @description The department being created is responsible for given category as identified by the `category_id` (true) or not (false). Defaults to false. */
          is_responsible?: boolean;
          /** @description The department being created can view given category as identified by the `category_id` (true) or not (false). Defaults to false. */
          can_view?: boolean;
        })[];
    };
    /** @description Example identifiers with types for context. */
    V1PrivateExpressionContextGet: {
      /** @description List of child expression context types */
      results?: ({
          /** @description identifier name */
          identifier?: string;
          /** @description identifier type (point, time, str, set, dict, number) */
          identifier_type?: string;
          /** @description context type name */
          type?: string;
        })[];
    };
    /** @description JSON data for new department */
    expressionCreate: {
      /** @description Name of expression */
      name: string;
      /** @description expression in expression language */
      code: string;
      /** @description type of expression */
      type: string;
    };
    /** @description JSON data for partial update to department. */
    expressionPatch: {
      /** @description Name of expression */
      name: string;
      /** @description expression in expression language */
      code: string;
      /** @description type of expression */
      type: string;
    };
    /** @description JSON serialization of paginated list of SIA users. */
    privateUserListResponse: {
      _links?: {
        self?: {
          /** @description URI of current page */
          href?: string;
        };
        next?: {
          /** @description URI of the next page in SIA users list (null) if not available */
          href?: string;
        };
        previous?: {
          /** @description URI of the previous page in SIA users list (null) if not available */
          href?: string;
        };
      };
      /** @description Total count of results for the request */
      count?: number;
      /** @description A list of categories, paginated */
      results?: (components["schemas"]["privateNestedUserResponse"])[];
    };
    /** @description JSON serialization of a SIA user. */
    privateNestedUserResponse: {
      _links?: {
        self: {
          /** @description Hyperlink to detailed data of this user. */
          href: string;
        };
      };
      /** @description Textual representation of user for display purposes. */
      _display?: string;
      /** @description ID of user */
      id?: number;
      /**
       * Format: email 
       * @description Username
       */
      username?: string;
      /** @description User is active (true) or inactive (false) */
      is_active?: boolean;
      /** @description List of roles for this user. */
      roles?: (string)[];
      profile?: components["schemas"]["privateNestedProfileResponse"];
    };
    /** @description JSON serialization of a SIA user profile */
    privateNestedProfileResponse: {
      /** @description Note field associated with a SIA user. */
      note?: string;
      /** @description List of departments associated with a SIA user. */
      departments?: (string)[];
      /**
       * Format: date-time 
       * @description Timestamp of user profile creation
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description Timestamp of last user profile update
       */
      updated_at?: string;
    };
    /** @description Detailed JSON serialization of a SIA user. */
    privateUserDetailResponse: {
      /** @description HAL JSON links */
      _link?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of this user in API
           */
          href?: string;
        };
      };
      /** @description Textual representation of user for display purposes. */
      _display?: string;
      /** @description ID of user */
      id?: number;
      /**
       * Format: email 
       * @description Username (must be an email address for SIA).
       */
      username?: string;
      /**
       * Format: email 
       * @description Email of user, matches username.
       */
      email?: string;
      /** @description First name of SIA user. */
      first_name?: string;
      /** @description Last name of SIA user. */
      last_name?: string;
      /** @description User is active (true) or inactive (false) */
      is_active?: boolean;
      /** @description SIA is build using the Django web framework. This framework has a built-in admin interface for maintenance, users that have the is_staff flag set to true are allowed access to this admin interface. In SIA the admin is purely for technical purposes, day-to-day user management can be achieved through the API and associated frontend. */
      is_staff?: boolean;
      /** @description User has superuser privileges that trump all permission checks (true) or has normal user user privileges (false). */
      is_superuser?: boolean;
      /** @description List of roles associated with the SIA user. */
      roles?: (components["schemas"]["privateNestedRoleResponse"])[];
      /** @description List of permissions assigned directly to user (not via roles). */
      permissions?: (components["schemas"]["privateNestedPermissionResponse"])[];
      profile?: components["schemas"]["privateNestedProfileResponse"];
    };
    /** @description JSON serialization of paginated list of SIA users. */
    privateUsernameListResponse: {
      _links?: {
        self?: {
          /** @description URI of current page */
          href?: string;
        };
        next?: {
          /** @description URI of the next page in SIA users list (null) if not available */
          href?: string;
        };
        previous?: {
          /** @description URI of the previous page in SIA users list (null) if not available */
          href?: string;
        };
      };
      /** @description Total count of results for the request */
      count?: number;
      /** @description A list of categories, paginated */
      results?: (components["schemas"]["privateNestedUsernameResponse"])[];
    };
    /** @description JSON serialization of a SIA username. */
    privateNestedUsernameResponse: {
      /**
       * Format: email 
       * @description Username
       */
      username?: string;
    };
    /** @description Child signals associated with a specific parent Signal. If the requesting user has access to the parent signal and not the child signals, they will still be visible in this endpoint in an abridged representation. */
    V1PrivateSignalchildrenGet: {
      /** @description HAL JSON links */
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of these child signals in API
           */
          href?: string;
        };
      };
      /** @description Number of child signals associated with parent signal. */
      count?: number;
      /** @description List of child signals */
      results?: ({
          /** @description HAL JSON links */
          _links?: {
            self?: {
              /**
               * Format: uri 
               * @description URI of this child signal
               */
              href?: string;
            };
          };
          /** @description child signal ID */
          id?: number;
          /** @description child signal status */
          status?: {
            /** @description status "state" code */
            state?: string;
            /** @description display name of status */
            state_display?: string;
          };
          /** @description Main and sub category of child signal */
          category?: {
            /** @description sub category name */
            sub?: string;
            /** @description sub category slug */
            sub_slug?: string;
            /** @description department codes associated with sub category */
            departments?: string;
            /** @description main category name */
            main?: string;
            /** @description main category slug */
            main_slug?: string;
          };
        })[];
    };
    /** @description A SIA role */
    privateNestedRoleResponse: {
      /** @description HAL JSON links */
      _link?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of this role in API
           */
          href?: string;
        };
      };
      /** @description Textual representation of role for display purposes. */
      _display?: string;
      /** @description ID of this role */
      id?: number;
      /** @description Name of this role */
      name?: string;
      /** @description List of permissions associated with this role */
      permissions?: (components["schemas"]["privateNestedPermissionResponse"])[];
    };
    /** @description SIA permission */
    privateNestedPermissionResponse: {
      /** @description HAL JSON links */
      _link?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of this permission in API
           */
          href?: string;
        };
      };
      /** @description Textual representation of permission for display purposes. */
      _display?: string;
      /** @description ID of this permission */
      id?: number;
      /** @description Name of this permission */
      name?: string;
      /** @description Codename (technical) of this permission */
      codename?: string;
    };
    /** @description EXPERIMENTAL - Area GEOjson list */
    V1AreasGEOJsonList: {
      /** @example FeatureCollection */
      type?: string;
      features?: (Record<string, never>)[];
    };
    /** @description EXPERIMENTAL - Area GEOjson */
    V1AreaGEOJson: {
      /** @example Feature */
      type?: string;
      geometry?: {
        /** @example MultiPolygon */
        type?: string;
        /**
         * @example [
         *   [
         *     [
         *       [
         *         0,
         *         0
         *       ],
         *       [
         *         0,
         *         1
         *       ],
         *       [
         *         1,
         *         1
         *       ],
         *       [
         *         0,
         *         0
         *       ]
         *     ]
         *   ],
         *   [
         *     [
         *       [
         *         1,
         *         1
         *       ],
         *       [
         *         1,
         *         2
         *       ],
         *       [
         *         2,
         *         2
         *       ],
         *       [
         *         1,
         *         1
         *       ]
         *     ]
         *   ]
         * ]
         */
        coordinates?: (number)[];
      };
      properties?: {
        /**
         * @description The Name of the Area 
         * @example Amsterdam
         */
        name?: string;
        type?: {
          /**
           * @description The Name of the Area type 
           * @example Gebied
           */
          name?: string;
          /**
           * @description The code of the Area type 
           * @example gebied
           */
          code?: string;
        };
      };
    };
    /** @description EXPERIMENTAL - Area GEOjson list */
    V1AreasJsonList: {
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of current page
           */
          href?: string;
        };
        next?: {
          /**
           * Format: uri 
           * @description URI of the next page
           */
          href?: string | null;
        };
        previous?: {
          /**
           * Format: uri 
           * @description URI of the previous page 
           * @example null
           */
          href?: string | null;
        };
      };
      /**
       * @description Total count of results for the request 
       * @example 1
       */
      count?: number;
      /** @description A list of signals, paginated */
      results?: (components["schemas"]["V1AreaJson"])[];
    };
    /** @description EXPERIMENTAL - Area GEOjson */
    V1AreaJson: {
      /**
       * @description The Name of the Area 
       * @example Gebied
       */
      name?: string;
      /**
       * @description The code of the Area 
       * @example gebied
       */
      code?: string;
      type?: {
        /**
         * @description The Name of the Area type 
         * @example Gebied
         */
        name?: string;
        /**
         * @description The code of the Area type 
         * @example gebied
         */
        code?: string;
      };
      /**
       * @example [
       *   4.804035,
       *   52.306854,
       *   4.87683,
       *   52.352063
       * ]
       */
      bbox?: (number)[];
    };
    /** @description EXPERIMENTAL - Questions json list */
    V1QuestionsJsonList: {
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of current page
           */
          href?: string;
        };
        next?: {
          /**
           * Format: uri 
           * @description URI of the next page
           */
          href?: string | null;
        };
        previous?: {
          /**
           * Format: uri 
           * @description URI of the previous page 
           * @example null
           */
          href?: string | null;
        };
      };
      /**
       * @description Total count of results for the request 
       * @example 1
       */
      count?: number;
      /** @description A list of signals, paginated */
      results?: (components["schemas"]["V1QuestionJson"])[];
    };
    /** @description EXPERIMENTAL - Question json */
    V1QuestionJson: {
      /**
       * @description The question key 
       * @example extra_bedrijven_horeca_personen
       */
      key?: string;
      /**
       * @description The code of the Area 
       * @example CheckboxInput 
       * @enum {string}
       */
      field_type?: "PlainText" | "TextInput" | "MultiTextInput" | "CheckboxInput" | "RadioInput" | "SelectInput" | "TextareaInput" | "MapSelect" | "AssetSelect";
      meta?: Record<string, never>;
    };
    /** @description List of sources */
    V1SourceList: {
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of current page
           */
          href?: string;
        };
        next?: {
          /**
           * Format: uri 
           * @description URI of the next page
           */
          href?: string | null;
        };
        previous?: {
          /**
           * Format: uri 
           * @description URI of the previous page 
           * @example null
           */
          href?: string | null;
        };
      };
      /**
       * @description Total count of results for the request 
       * @example 1
       */
      count?: number;
      /** @description A list of signals, paginated */
      results?: (components["schemas"]["V1Source"])[];
    };
    /** @description Possible signal source */
    V1Source: {
      /**
       * @description ID of source 
       * @example 1
       */
      id?: number;
      /**
       * @description Name of source 
       * @example Eigen organisatie
       */
      name?: string;
      /**
       * @description Description of source 
       * @example Binnengekomen via de eigen organisatie
       */
      description?: string;
    };
    /** @description List of sources */
    V1PrivateSignalAttachmentsList: {
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of current page
           */
          href?: string;
        };
        next?: {
          /**
           * Format: uri 
           * @description URI of the next page
           */
          href?: string | null;
        };
        previous?: {
          /**
           * Format: uri 
           * @description URI of the previous page 
           * @example null
           */
          href?: string | null;
        };
      };
      /**
       * @description Total count of results for the request 
       * @example 1
       */
      count?: number;
      /** @description A list of Attachments, paginated */
      results?: (components["schemas"]["V1PrivateSignalAttachmentDetail"])[];
    };
    /** @description Attachment */
    V1PrivateSignalAttachmentDetail: {
      /**
       * @description Textual representation of signal for display purposes. 
       * @example Attachment object (1)
       */
      _display?: string;
      _links?: {
        self?: {
          /** @description URI to the attachment detail */
          href?: string;
        };
      };
      /**
       * @description The location of the attachment, for downloading. 
       * @example /signals/media/images/2020/01/01/happy-new-year.jpg
       */
      location?: string;
      /**
       * @description Boolean that indicates whether this attachment is image. Value is `true` if image else `false`. 
       * @example true
       */
      is_image?: boolean;
      /**
       * Format: date-time 
       * @description Timestamp of attachment's creation (upload). 
       * @example 2020-01-01T00:00:00+00:00
       */
      created_at?: string;
      /**
       * @description Username of the attachment's uploader. 
       * @example someuser@example.com
       */
      created_by?: string;
    };
    /** @description JSON data describing the context overview of a Signal */
    privateContextResponse: {
      _links?: {
        curies?: {
          /** @description The compact URI (curie) named 'sia' */
          name?: string;
          href?: string;
        };
        self?: {
          /**
           * @description URI to the context overview of a Signal 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/1/context/
           */
          href?: string;
        };
        "sia:context-reporter-detail"?: {
          /**
           * @description URI to the detailed context based on the reporter email 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/
           */
          href?: string;
        };
        "sia:context-geography-detail"?: {
          /**
           * @description URI to the detailed context based on geography 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/1/context/near/geography/
           */
          href?: string;
        };
      };
      near?: {
        /** @example 10 */
        signal_count?: number;
      };
      reporter?: {
        /** @example 5 */
        signal_count?: number;
        /** @example 2 */
        open_count?: number;
        /** @example 2 */
        positive_count?: number;
        /** @example 1 */
        negative_count?: number;
      };
    };
    /** @description Detailed JSON serialization of SIA Signals/meldingen related to the reporter email */
    privateContextReporterResponse: {
      /**
       * @description ID of the signal 
       * @example 1
       */
      id?: number;
      /**
       * Format: date-time 
       * @example 2021-04-14T00:00:00+00:00
       */
      created_at?: string;
      category?: {
        /** @example Overlast terrassen */
        sub?: string;
        /** @example overlast-terrassen */
        sub_slug?: string;
        /** @example Overlast Bedrijven en Horeca */
        main?: string;
        /** @example overlast-bedrijven-en-horeca */
        main_slug?: string;
        /** @example VTH */
        departments?: string;
      };
      status?: {
        /** @example m */
        state?: string;
        /** @example Gemeld */
        state_display?: string;
      };
      /** @description The latest given feedback, can also be null if there is no feedback */
      feedback?: {
        /** @example false */
        is_satisfied?: boolean;
        /**
         * Format: date-time 
         * @example 2021-04-14T00:00:00+00:00
         */
        submitted_at?: string;
      } | null;
      /** @example true */
      can_view_signal?: boolean;
      /** @example true */
      has_children?: boolean;
    };
    /** @description JSON serialization of paginated list of signals related to the reporter email */
    privateContextReporterResponseList: {
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of current page 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/?page=2
           */
          href?: string;
        };
        next?: {
          /**
           * Format: uri 
           * @description URI of the next page 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/?page=3
           */
          href?: string | null;
        };
        previous?: {
          /**
           * Format: uri 
           * @description URI of the previous page 
           * @example http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/?page=1
           */
          href?: string | null;
        };
      };
      /**
       * @description Total count of results for the request 
       * @example 10
       */
      count?: number;
      /** @description A list of signals context, paginated */
      results?: (components["schemas"]["privateContextReporterResponse"])[];
    };
    /** @description Geography */
    privateContextNearGeographyResponse: {
      /** @example FeatureCollection */
      type?: string;
      features?: ({
          /** @example Feature */
          type?: string;
          geometry?: {
            /** @example Point */
            type?: string;
            /**
             * @example [
             *   4.890986949631043,
             *   52.41875227274259
             * ]
             */
            coordinates?: (number)[];
          };
          properties?: {
            /**
             * @description The ID of the Signal 
             * @example 1
             */
            id?: number;
            status?: {
              /**
               * Format: string 
               * @example m
               */
              state?: Record<string, never>;
              /**
               * Format: string 
               * @example Gemeld
               */
              state_display?: Record<string, never>;
            };
            /**
             * Format: date-time 
             * @example 2020-01-01T00:00:00+00:00
             */
            created_at?: string;
          };
        })[];
    };
    privateReportResponse: {
      /** @example 12345 */
      total_signal_count?: number;
      results?: ({
          category?: {
            /** @example Example Category */
            name?: string;
            departments?: (string)[];
          };
          /** @example 12345 */
          signal_count?: number;
        })[];
    };
    /** @description JSON serialization of paginated list of stored Signal filters */
    privateStoredSignalFilterResponseList: {
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of current page 
           * @example http://127.0.0.1:8000/signals/v1/private/me/filters
           */
          href?: string;
        };
        next?: {
          /**
           * Format: uri 
           * @description URI of the next page 
           * @example http://127.0.0.1:8000/signals/v1/private/me/filters/?page=2
           */
          href?: string | null;
        };
        previous?: {
          /**
           * Format: uri 
           * @description URI of the previous page 
           * @example null
           */
          href?: string | null;
        };
      };
      /**
       * @description Total count of results for the request 
       * @example 10
       */
      count?: number;
      /** @description A list of stored Signal filters, paginated */
      results?: (components["schemas"]["privateStoredSignalFilterResponse"])[];
    };
    /** @description Detailed JSON serialization of a stored Signal filter. */
    privateStoredSignalFilterResponse: {
      /** @description HAL JSON links */
      _link?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of this stored Signal filter in API 
           * @example http://127.0.0.1:8000/signals/v1/private/me/filters/123
           */
          href?: string;
        };
      };
      /** @description Textual representation of the stored Signal filter for display purposes. */
      _display?: string;
      /**
       * @description ID of stored Signal filter 
       * @example 123
       */
      id?: number;
      /** @example My stored filter */
      name?: string;
      /**
       * Format: date-time 
       * @example 2021-08-16T00:00:00+00:00
       */
      created_at?: string;
      /** @example {} */
      options?: Record<string, never>;
      /** @default false */
      refresh?: boolean;
      /** @default false */
      show_on_overview?: boolean;
    };
    /** @description Detailed JSON post/patch serialization for a stored Signal filter. */
    privateStoredSignalFilterRequest: {
      /** @example My stored filter */
      name?: string;
      /**
       * Format: date-time 
       * @example 2021-08-16T00:00:00+00:00
       */
      created_at?: string;
      /** @example {} */
      options?: Record<string, never>;
      /** @default false */
      refresh?: boolean;
      /** @default false */
      show_on_overview?: boolean;
    };
    /** @description JSON data for category updates */
    publicFeedbackForm: {
      /** @description Flag if the reporter is satisfied or not */
      is_satisfied: boolean;
      /** @description Flag if the reporter allows for contacting */
      allows_contact: boolean;
      /** @description text giving by the reporter */
      text?: string;
      /** @description List of texts from the reporter */
      text_list?: (string)[];
      /** @description Extra set of text from the reporter */
      text_extra: string;
    };
    /** @description List of standard answers */
    V1StandardAnswersList: {
      _links?: {
        self?: {
          /**
           * Format: uri 
           * @description URI of current page
           */
          href?: string;
        };
        next?: {
          /**
           * Format: uri 
           * @description URI of the next page
           */
          href?: string | null;
        };
        previous?: {
          /**
           * Format: uri 
           * @description URI of the previous page 
           * @example null
           */
          href?: string | null;
        };
      };
      /**
       * @description Total count of results for the request 
       * @example 1
       */
      count?: number;
      /** @description A list of standard answers, paginated */
      results?: (components["schemas"]["V1StandardAnswers"])[];
    };
    /** @description Standard answer */
    V1StandardAnswers: {
      /**
       * @description If a standard answer is a positive or negative answer 
       * @example true
       */
      is_satisfied?: boolean;
      /**
       * @description The text of the standard asnwer 
       * @example Ik ben goed geholpen
       */
      text?: string;
      /**
       * @description The topic a standard answer belongs to 
       * @example Hoe heeft de gemeente u geholpen?
       */
      topic?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
